type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.*;\nimport java.util.List;\nimport java.util.Collections;\n\
    \npublic class CoffeeMachine {\npublic static int water = 400;\n        public\
    \ static int milk = 540;\n        public static int beans = 120;\n        public\
    \ static int cups = 9;\n        public static int money = 550;\n    public static\
    \ void main(String[] args) {\n        \n        \n        //  create interface\
    \ for user input\n//        Scanner userInput = new Scanner(System.in);\n\n  \
    \      // create an instance of a coffee machine\n        CoffeeMachine myCoffeeMachine\
    \ = new CoffeeMachine();\n        \n//      myCoffeeMachine.countMakeableCups();\n\
    \        \n        myCoffeeMachine.machineStatus();\n        myCoffeeMachine.machineAction();\n\
    //        myCoffeeMachine.makeCoffee();\n\n//        System.out.print(\"Write\
    \ how many cups of coffee you will need:\" + '\\n' + \"> \");\n//       int cups\
    \ = userInput.nextInt();\n//       System.out.println(cups);\n//        myCoffeeMachine.calcIngredientsTotal(cups);\n\
    //        System.out.println(cups);\n//        userInput.close();\n\n    } //\
    \ end of main method\n\n    public void machineStatus()  {\n        System.out.println(\"\
    The coffee machine has: \");\n        System.out.printf(\"%d of water\\n%d of\
    \ milk\\n%d of beans\\n%d of disposable cups\\n%d of money\\n\\n\", water, milk,\
    \ beans, cups, money);\n    }\n\n    public void makeCoffee() {\n        System.out.println(\"\
    Starting to make a coffee\");\n        System.out.println(\"Grinding coffee beans\"\
    );\n        System.out.println(\"Boiling water\");\n        System.out.println(\"\
    Mixing boiled water with crushed coffee beans\");\n        System.out.println(\"\
    Pouring coffee into the cup\");\n        System.out.println(\"Pouring some milk\
    \ into the cup\");\n        System.out.println(\"Coffee is ready!\");\n    }\n\
    \n    public void countMakeableCups() {\n        Scanner ingredients = new Scanner(System.in);\n\
    \        \n        System.out.print(\"Write how many ml of water the coffee machine\
    \ has: \" + \"\\n\");\n        int waterCups = ingredients.nextInt() / 200;\n\
    \        System.out.print(\"Write how many ml of milk the coffee machine has:\
    \ \" + \"\\n\");\n        int milkCups = ingredients.nextInt() / 50;\n       \
    \ System.out.print(\"Write how many g of beans the coffee machine has: \" + \"\
    \\n\");\n        int beansCups = ingredients.nextInt() / 15;   \n        System.out.print(\"\
    Write how many cups of coffee you will need: \" + \"\\n\");\n        int cups\
    \ = ingredients.nextInt();\n        ingredients.close();\n        \n        int\
    \ maxCupsAvailable = Math.min(Math.min(waterCups, milkCups), beansCups);\n   \
    \     \n        if(maxCupsAvailable < cups) {\n            System.out.printf(\"\
    No, I can make only %d cup(s) of coffee\\n\", maxCupsAvailable);\n        } else\
    \ { \n            if(maxCupsAvailable == cups) {\n                System.out.println(\"\
    Yes, I can make that amount of coffee\\n\");\n            } else {\n         \
    \       System.out.printf(\"Yes, I can make that amount of coffee (and even %d\
    \ more than that)\\n\", maxCupsAvailable - cups);\n            }\n        }\n\
    \    }\n    \n    public void machineAction() {\n        System.out.println(\"\
    Write action (buy, fill, take): \");\n        Scanner coffeeType = new Scanner(System.in);\n\
    \        String action = coffeeType.next();\n\n         CoffeeMachine myCoffeeMachine\
    \ = new CoffeeMachine();\n        \n        switch (action) {\n            case\
    \ \"buy\":\n            System.out.println(\"What do you want to buy? 1 - espresso,\
    \ 2 - latte, 3 - cappuccino: \");\n            int coffee = coffeeType.nextInt();\n\
    \n            if (coffee == 1) {\n                System.out.println();\n    \
    \            water -= 250;\n                beans -= 16;\n                cups\
    \ -= 1;\n                money += 4;\n                myCoffeeMachine.machineStatus();\n\
    \                \n            } else if (coffee == 2) {\n                System.out.println();\n\
    \                water -= 350;\n                milk -= 75;\n                beans\
    \ -= 20;\n                cups -= 1;\n                money += 7;\n          \
    \      myCoffeeMachine.machineStatus();\n                \n            } else\
    \ if (coffee == 3) {\n                System.out.println();\n                water\
    \ -= 200;\n                milk -= 100;\n                beans -= 12;\n      \
    \          cups -= 1;\n                money += 6;\n                myCoffeeMachine.machineStatus();\n\
    \            } else  {\n                System.out.println(\"Wrong choice!\");\n\
    \            }\n            coffeeType.close();\n            break;\n\n      \
    \      case \"fill\":\n            Scanner stuffToAdd = new Scanner(System.in);\n\
    \            System.out.print(\"Write how many ml of water do you want to add:\
    \ \" + \"\\n\");\n            water += stuffToAdd.nextInt();\n            System.out.print(\"\
    Write how many ml of milk do you want to add: \" + \"\\n\");\n            milk\
    \  += stuffToAdd.nextInt();\n            System.out.print(\"Write how many g of\
    \ beans do you want to add: \" + \"\\n\");\n            beans += stuffToAdd.nextInt();\
    \   \n            System.out.print(\"Write how many disposable coffee cups do\
    \ you want to add: \" + \"\\n\");\n            cups += stuffToAdd.nextInt();\n\
    \            System.out.println();\n            myCoffeeMachine.machineStatus();\n\
    \            stuffToAdd.close();      \n            break;\n\n            case\
    \ \"take\": \n            System.out.println(\"I gave you $\" + money);\n    \
    \        money = 0;\n            System.out.println();\n            myCoffeeMachine.machineStatus();\n\
    \            break;\n\n            default:\n            System.out.println(\"\
    Wrong action!\");\n            break;\n          }\n        }   //end of machineAction();\
    \   \n        \n    \n    public void calcIngredientsTotal(int cups){\n\n    \
    \    // constants\n        // ml\n        int waterOneCup = 200;\n        int\
    \ water = waterOneCup * cups;\n        // ml\n        int milkOneCup = 50;\n \
    \       int milk = milkOneCup * cups;\n        // g\n        int beansOneCup =\
    \ 15;\n        int beans = beansOneCup * cups;\n\n        System.out.printf(\"\
    For %d cups of coffee you will need:\\n%7d ml of water\\n%7d ml of milk\\n%7d\
    \  g of coffee beans\\n\", cups, water, milk, beans);\n\n    }\n}  // end of class\n\
    \    "
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Solved
record: 4
